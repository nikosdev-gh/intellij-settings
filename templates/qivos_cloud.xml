<templateSet group="qivos_cloud">
  <template name="filterRe" value="@Stateless&#10;@SearchFilterResolverDefintion(criteriaType = TagEssentialCriteria.TYPE)&#10;public class TagEssentialFilterResolver extends SearchFilterResolver&lt;TagEssentialCriteria, TagDataFilter&gt; {&#10;&#10;    @Override&#10;    public TagDataFilter createFilter(Integer pageNumber, Integer pageSize, FilterSortField orderBy) {&#10;        return new TagDataFilter(pageNumber, pageSize, orderBy);&#10;    }&#10;&#10;    @Override&#10;    public TagDataFilter updateFilter(TagDataFilter filter, TagEssentialCriteria criteria) {&#10;        filter.setTagTargetEnum(criteria.getTagType());&#10;        return filter;&#10;    }&#10;}" description="FilterResolver extender" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="queryEx" value="@Stateless&#10;@SearchQueryExecutorQualifier(appliesTo = StorePos.class)&#10;public class StorePosQueryExecutor extends SearchQueryExecutor&lt;StorePos, StorePosDataFilter&gt; {&#10;&#10;    @Inject&#10;    private StorePosDataService storePosDataService;&#10;&#10;    @Override&#10;    public DataFilterResult&lt;StorePos&gt; executeQuery(StorePosDataFilter filter) {&#10;        return storePosDataService.executeFilterQuery(filter);&#10;    }&#10;&#10;    @Override&#10;    public Class&lt;StorePos&gt; appliesTo() {&#10;        return StorePos.class;&#10;    }&#10;&#10;}&#10;" description="queryExectuor extender" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="filterSer" value="    @Override&#10;    protected Class&lt;Tag&gt; getRootClazz() {&#10;        return  Tag.class;&#10;    }&#10;&#10;    @Override&#10;    protected List&lt;Predicate&gt; addConcreteFilterPredicates(CriteriaQuery cq, DataFilter filter) {&#10;        final CriteriaBuilder cb = entityManager.getCriteriaBuilder();&#10;        final CriteriaQuery&lt;PreferredBrandUtil&gt; cq = cb.createQuery(PreferredBrandUtil.class);&#10;        final Root&lt;LoyaltyInvoice&gt; loyaltyInvoiceRoot = cq.from(LoyaltyInvoice.class);&#10;        final Join&lt;LoyaltyInvoice, LoyaltyInvoiceLine&gt; invoiceLineJoin = loyaltyInvoiceRoot.join(LoyaltyInvoice_.loyaltyInvoiceLineList);&#10;        final Join&lt;LoyaltyInvoiceLine, Product&gt; productJoin = invoiceLineJoin.join(LoyaltyInvoiceLine_.product);&#10;        final Join&lt;Product, TableProductBrand&gt; brandJoin = productJoin.join(Product_.tableProductBrand);&#10;&#10;        final List&lt;Predicate&gt; predicates = new ArrayList&lt;&gt;();&#10;        predicates.add(cb.equal(loyaltyInvoiceRoot.get(LoyaltyInvoice_.loyaltyMember).get(LoyaltyMember.FIELD_ID), lm.getId().toString()));&#10;        predicates.add(cb.greaterThanOrEqualTo(loyaltyInvoiceRoot.get(LoyaltyInvoice_.invoiceDate), lookUpDate));&#10;        predicates.add(cb.greaterThan(invoiceLineJoin.get(LoyaltyInvoiceLine_.lineAmount), BigDecimal.ZERO));&#10;        predicates.add(cb.isNotNull(productJoin.get(Product_.tableProductBrand)));&#10;        cq.where(predicates.toArray(new Predicate[]{}));&#10;&#10;        cq.select(cb.construct(PreferredBrandUtil.class,&#10;                brandJoin,&#10;                cb.sum(invoiceLineJoin.get(LoyaltyInvoiceLine_.lineAmount))&#10;                )&#10;        );&#10;        cq.groupBy(brandJoin);&#10;        cq.orderBy(cb.desc(cb.sum(invoiceLineJoin.get(LoyaltyInvoiceLine_.lineAmount))));&#10;        TypedQuery&lt;PreferredBrandUtil&gt; datos = entityManager.createQuery(cq);&#10;        return datos.getResultList();&#10;    }" description="filterService methods" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="searchRes" value="public class TagSearchResponse implements APIResponseDTO {&#10;&#10;    private TagBaseDTO essentials;&#10;    private BrandTagBaseDTO brandData;&#10;&#10;&#10;    public TagBaseDTO getEssentials() {&#10;        return essentials;&#10;    }&#10;&#10;    public void setEssentials(TagBaseDTO essentials) {&#10;        this.essentials = essentials;&#10;    }&#10;&#10;    @Override&#10;    @JsonIgnore&#10;    public Date getLastModificationDate() {&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public void setLastModificationDate(Date date) {&#10;        //NOOP&#10;    }&#10;}" description="searchResponse  example" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="searchPay" value="public class TagSearchResponsePayload extends SearchPayload&lt;TagSearchResponse&gt; {&#10;&#10;&#10;    public TagSearchResponsePayload(List&lt;TagSearchResponse&gt; data, Boolean hasMore, Long totalCount) {&#10;        super(data, hasMore, totalCount);&#10;    }&#10;}&#10;" description="searchPayload example" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="apiSearchC" value="    @Inject&#10;    private APISearchController searchController;" description="apiSearchController Injection" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="validationC" value="    @Inject&#10;    private APIValidationController validationController;" description="APIValidationController injection" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="lookupC" value="    @Inject&#10;    private LookupController lookupController;" description="LookupController injection" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="searchEnv" value="public class CouponSetSearchResponseEnvelope extends APIResponseSearchEnvelope&lt;CouponSetSearchResponsePayload&gt; {&#10;    &#10;    public CouponSetSearchResponseEnvelope(CouponSetSearchResponsePayload payload) {&#10;        super(payload);&#10;    }&#10;    &#10;}&#10;" description="search envelope example" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="ciwebSer" value="@Path(&quot;/tier&quot;)&#10;@RequestScoped&#10;public class TierServices {&#10;&#10;    @POST&#10;    @Path(&quot;/findByFilter&quot;)&#10;    @Consumes(MediaType.APPLICATION_JSON)&#10;    @Produces(MediaType.APPLICATION_JSON + RestUtil.CHARSET_UTF8)&#10;    @PermissionAllowed(permission = &quot;MenuLoyaltyMembersRole&quot;)&#10;    @Interceptors(CiWebRestSecurityInterceptor.class)&#10;    public Response getLoyaltyMembersByFilter(LoyaltyMemberFilterDto memberFilter,&#10;                                              @QueryParam(&quot;start&quot;) @DefaultValue(&quot;0&quot;) Integer start,&#10;                                              @QueryParam(&quot;pageSize&quot;) @DefaultValue(&quot;10&quot;) Integer pageSize,&#10;                                              @QueryParam(&quot;sortField&quot;) String sortField,&#10;                                              @QueryParam(&quot;sortOrder&quot;) String sortOrder) {&#10;        if (memberFilter == null) {&#10;            return RestUtil.buildBadRequestResponse(&quot;No filters added for member search request&quot;);&#10;        }&#10;        if (pageSize &gt; 500 || pageSize &lt; 1) {&#10;            //Protect the innocent...&#10;            return RestUtil.buildBadRequestResponse(&quot;Invalid page size specified&quot;);&#10;        }&#10;        if (sortField == null || sortOrder == null) {&#10;            return RestUtil.buildBadRequestResponse(&quot;sortField or sortOrder cannot be null&quot;);&#10;        }&#10;        List&lt;LoyaltyMemberSearchDto&gt; memberList = loyaltyMemberRestController.getLoyaltyMembersByFilter(memberFilter, start, pageSize, sortField, sortOrder);&#10;        if (memberList.isEmpty()) {&#10;            return RestUtil.buildNotFoundResponse(&quot;No members Found&quot;);&#10;        }&#10;        return RestUtil.buildEntityResponse(memberList);&#10;    }" description="template of a new ci web resource" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="crit" value="@ApiModel(value = &quot;PersonCriteria&quot;, discriminator = &quot;criteriaType&quot;,&#10;        subTypes = {&#10;                EmailCriteria.class,&#10;                TelephoneCriteria.class,&#10;                PersonQCCodeCriteria.class,&#10;                PersonMultipleQCCodeCriteria.class,&#10;                LoyaltyCardCriteria.class,&#10;                LoyaltyMemberCategoryCriteria.class,&#10;                LoyaltyMembershipQCCodeCriteria.class,&#10;                LoyaltyMemberMultipleQCCodeCriteria.class,&#10;                LoyaltyMembershipAttributeCriteria.class,&#10;                LoyaltyMemberTagSearchCriteria.class}, reference = &quot;EmailCriteria&quot;)&#10;@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = &quot;criteriaType&quot;)&#10;@JsonSubTypes({&#10;        @JsonSubTypes.Type(value = EmailCriteria.class, name = EmailCriteria.TYPE),&#10;        @JsonSubTypes.Type(value = TelephoneCriteria.class, name = TelephoneCriteria.TYPE),&#10;        @JsonSubTypes.Type(value = PersonQCCodeCriteria.class, name = PersonQCCodeCriteria.TYPE),&#10;        @JsonSubTypes.Type(value = CustomerAttributeCriteria.class, name = CustomerAttributeCriteria.TYPE),&#10;        @JsonSubTypes.Type(value = LoyaltyCardCriteria.class, name = LoyaltyCardCriteria.TYPE),&#10;        @JsonSubTypes.Type(value = LoyaltyMembershipQCCodeCriteria.class, name = LoyaltyMembershipQCCodeCriteria.TYPE),&#10;        @JsonSubTypes.Type(value = LoyaltyMembershipAttributeCriteria.class, name = LoyaltyMembershipAttributeCriteria.TYPE),&#10;        @JsonSubTypes.Type(value = FirstNameCriteria.class, name = FirstNameCriteria.TYPE),&#10;        @JsonSubTypes.Type(value = LastNameCriteria.class, name = LastNameCriteria.TYPE),&#10;        @JsonSubTypes.Type(value = LoyaltySchemaCodeCriteria.class, name = LoyaltySchemaCodeCriteria.TYPE),&#10;        @JsonSubTypes.Type(value = LoyaltyMemberCategoryCriteria.class, name = LoyaltyMemberCategoryCriteria.TYPE),&#10;        @JsonSubTypes.Type(value = PersonMultipleQCCodeCriteria.class, name = PersonMultipleQCCodeCriteria.TYPE),&#10;        @JsonSubTypes.Type(value = LoyaltyMemberMultipleQCCodeCriteria.class, name = LoyaltyMemberMultipleQCCodeCriteria.TYPE),&#10;        @JsonSubTypes.Type(value = LoyaltyMemberTagSearchCriteria.class, name = LoyaltyMemberTagSearchCriteria.TYPE)&#10;})&#10;public interface TierCriteria extends SearchCriteria {&#10;}&#10;" description="search criteria example" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
</templateSet>